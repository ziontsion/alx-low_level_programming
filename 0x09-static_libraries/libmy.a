!<arch>
0-isupper.c/    0           0     0     644     234       `
#include "main.h"

/**
* _isupper - Checks if c is uppercase character
* @c: Character to be checked
*
* Return: 1 if c is uppercase, 0 otherwise
*/
int _isupper(int c)
{
	if (c >= 'A' && c <= 'Z')
		return (1);
	else
		return (0);
}
0-memset.c/     0           0     0     644     326       `
#include "main.h"

/**
* _memset - fills memory with a constant byte
* @s: pointer to memory
* @b: byte to fill with
* @n: number of bytes to be filled
*
* Return: returns pointer to memory area s
*/
char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i = 0;

	while (i < n)
	{
		s[i] = b;
		i++;
	}
	return (s);
}
0-strcat.c/     0           0     0     644     387       `
#include "main.h"

/**
* _strcat - concatenates two strings
* @dest: string to be copied to
* @src: to be appended to end of dest
*
* Return: returns dest
*/
char *_strcat(char *dest, char *src)
{
	int i, j;

	i = 0;
	j = 0;

	while (*(dest + i) != '\0')
	{
		i++;
		j++;
	}

	i = 0;
	while (*(src + i) != '\0')
	{
		dest[j] = src[i];
		i++;
		j++;
	}
	dest[j] = '\0';
	return (dest);
}

100-atoi.c/     0           0     0     644     290       `
#include "main.h"

/**
* _atoi - converts string to integer
* @s: string to be converted
*
* Return: return integer
*/
int _atoi(char *s)
{
	int res = 0, i;

	for (i = 0; s[i] != '\0'; ++i)
	{
		if (s[i] > '9' || s[i] < '0')
			return (-1);
		res = res * 10 + s[i] - '0';
	}
	return res;
}
1-isdigit.c/    0           0     0     644     231       `
#include "main.h"

/**
* _isdigit - Checks if c is digit between 0 to 9
* @c: Character to be checked
*
* Return: 1 if c is digit, 0 otherwise
*/
int _isdigit(int c)
{
	if (c >= '0' && c <= '9')
		return (1);
	else
		return (0);
}

1-memcpy.c/     0           0     0     644     336       `
#include "main.h"

/**
* _memcpy - copies memory data
* @dest: buffer to be copied to
* @src: buffer to be copied from
* @n: number of bytes to be copied
*
* Return: returns pointer to dest
*/
char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i = 0;

	while (i < n)
	{
		dest[i] = src[i];
		i++;
	}
	return (dest);
}
1-strncat.c/    0           0     0     644     431       `
#include "main.h"

/**
* _strncat - Concatenates two strings
* @dest: to be concatenated to
* @src: to be concatenated to dest
* @n: number of bytes
*
* Return: returns dest
*/
char *_strncat(char *dest, char *src, int n)
{
	int i, j;

	i = 0;
	j = 0;
	while (*(dest + i) != '\0')
	{
		j++;
		i++;
	}

	i = 0;
	while (*(src + i) != *(src + n))
	{
		*(dest + j) = *(src + i);
		i++;
		j++;
	}
	*(dest + j) = '\0';
	return (dest);
}

2-strchr.c/     0           0     0     644     387       `
#include "main.h"
#include <stdio.h>

/**
* _strchr - locates character in a string
* @s: string to be checked
* @c: character to be located
*
* Return: returns pointer to first occurence of character
* or NULL if the character is not found
*/
char *_strchr(char *s, char c)
{
	while (*s)
	{
		if (*s == c)
		{
			return (s);
		}
		s++;
	}
	if (!c)
	{
		return (s);
	}
	return (NULL);
}

2-strlen.c/     0           0     0     644     236       `
#include "main.h"

/**
* _strlen - returns the length of a string
* @s: string passed
*
* Return: returns length of string passed
*/
int _strlen(char *s)
{
	int count = 0;

	while (*s != '\0')
	{
		count++;
		s++;
	}
	return (count);
}
2-strncpy.c/    0           0     0     644     382       `
#include "main.h"

/**
* _strncpy - works exactly like strncpy
* @dest: to be copied into
* @src: to be copied to
* @n: number of characters to copy
*
* Return: returns dest
*/
char *_strncpy(char *dest, char *src, int n)
{
	int i;

	for (i = 0; i < n && *(src + i) != '\0'; i++)
	{
		*(dest + i) = *(src + i);
	}
	while (i < n)
	{
		*(dest + i) = '\0';
		i++;
	}
	return (dest);
}
3-islower.c/    0           0     0     644     250       `
#include "main.h"

/**
* _islower - checks for lowercase character
* @c: The character to be checked
*
* Return: returns 1 if c is lowercase, returns 0 otherwise
*/
int _islower(int c)
{
	if (c >= 'a' && c <= 'z')
		return (1);
	else
		return (0);
}
3-puts.c/       0           0     0     644     224       `
#include "main.h"

/**
* _puts - prints a string followed by a new line
* @str: string to be printed
*
* Return: no return
*/
void _puts(char *str)
{
	while (*str != '\0')
	{
		_putchar(*str);
		str++;
	}
	_putchar('\n');
}
3-strcmp.c/     0           0     0     644     352       `
#include "main.h"

/**
* _strcmp - compares two strings
* @s1: string to be compared to s2
* @s2: string to be compared to s1
*
* Return: returns difference between strings
*/
int _strcmp(char *s1, char *s2)
{
	int i, output;

	i = 0;
	while (*(s1 + i) == *(s2 + i) && *(s1 + i) != '\0')
		i++;

	output = (*(s1 + i) - *(s2 + i));

	return (output);
}
3-strspn.c/     0           0     0     644     445       `
#include "main.h"

/**
* _strspn - gets length of a prefix substring
* @s: string
* @accept: substring
*
* Return: returns number of bytes
*/
unsigned int _strspn(char *s, char *accept)
{
	int i, j, match = 0;

	i = 0;
	while (s[i] != '\0')
	{
		if (s[i] != ' ')
		{
			j = 0;
			while (accept[j] != '\0')
			{
				if (s[i] == accept[j])
				{
					match++;
				}
				j++;
			}
		}
		else
		{
			return (match);
		}
		i++;
	}
	return (match);
}

4-isalpha.c/    0           0     0     644     299       `
#include "main.h"

/**
* _isalpha - checks for lowercase character
* @c: The character to be checked
*
* Return: returns 1 if c is letter, uppercase or lowercase, returns 0 otherwise
*/
int _isalpha(int c)
{
	if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'))
		return (1);
	else
		return (0);
}

4-strpbrk.c/    0           0     0     644     494       `
#include "main.h"
#include <stdio.h>

/**
* _strpbrk - locates the first occurence in the string s of any of the
* bytes in the string accept
* @s: string to be searched
* @accept: substring
*
* Return: returns pointer to the byte in s that matches one of the bytes in
* accept or NULL if no such byte is found
*/
char *_strpbrk(char *s, char *accept)
{
	int i;

	while (*s)
	{
		for (i = 0; accept[i]; i++)
		{
			if (*s == accept[i])
			{
				return (s);
			}
		}
		s++;
	}
	return ('\0');
}
5-strstr.c/     0           0     0     644     541       `
#include "main.h"
#include <stdio.h>

/**
* _strstr - locates a substring
* @haystack: string to be checked
* @needle: string be located
*
* Return: returns pointer to beginning of substring located
* or NULL if the substring is not found
*/
char *_strstr(char *haystack, char *needle)
{
	int i;

	if (*needle == '\0')
		return (haystack);

	for (i = 0; *(haystack + i) != '\0'; i++)
	{
		if (*(haystack + i) == *needle)
		{
			char *ptr = _strstr(haystack + i + 1, needle + 1);

			return ((ptr) ? ptr - 1 : NULL);
		}
	}
	return (NULL);
}

6-abs.c/        0           0     0     644     266       `
#include "main.h"

/**
* _abs - computers absolute value of an integer
* @n: integer to be passed
*
* Return: function returns 0
*/
int _abs(int n)
{
	if (n > 0)
	{
		n = n * 1;
	}
	else if (n == 0)
	{
		n = 0;
	}
	else if (n < 0)
	{
		n = n * -1;
	}
	return (n);
}
9-strcpy.c/     0           0     0     644     298       `
#include "main.h"

/**
* _strcpy - copies string from src to dest
* @dest: where string will go
* @src: where string is from
*
* Return: returns string
*/
char *_strcpy(char *dest, char *src)
{
	int i;

	for (i = 0; src[i] != '\0'; i++)
	{
		dest[i] = src[i];
	}
	dest[i] = '\0';
	return (dest);
}
_putchar.c/     0           0     0     644     242       `
#include <unistd.h>

/**
* _putchar - writes the character c to stdout
* @c: The character to print
*
* Return: On success 1.
* On error, -1 is returned, and errno is set appropriately.
*/
int _putchar(char c)
{
		return (write(1, &c, 1));
}
